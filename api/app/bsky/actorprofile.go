// Code generated by cmd/lexgenlite (see Makefile's lexgen); DO NOT EDIT.

package bsky

// schema: app.bsky.actor.profile

import (
	"encoding/json"
	"fmt"

	comatprototypes "github.com/agentio/atiquette/api/com/atproto"
	"github.com/agentio/atiquette/pkg/lexutil"
)

func init() {
	lexutil.RegisterType("app.bsky.actor.profile", &ActorProfile{})
}

// RECORDTYPE: ActorProfile
type ActorProfile struct {
	LexiconTypeID string `json:"$type,const=app.bsky.actor.profile" cborgen:"$type,const=app.bsky.actor.profile"`
	// avatar: Small image to be displayed next to posts from account. AKA, 'profile picture'
	Avatar *lexutil.LexBlob `json:"avatar,omitempty" cborgen:"avatar,omitempty"`
	// banner: Larger horizontal image to display behind profile view.
	Banner    *lexutil.LexBlob `json:"banner,omitempty" cborgen:"banner,omitempty"`
	CreatedAt *string          `json:"createdAt,omitempty" cborgen:"createdAt,omitempty"`
	// description: Free-form profile description text.
	Description          *string                        `json:"description,omitempty" cborgen:"description,omitempty"`
	DisplayName          *string                        `json:"displayName,omitempty" cborgen:"displayName,omitempty"`
	JoinedViaStarterPack *comatprototypes.RepoStrongRef `json:"joinedViaStarterPack,omitempty" cborgen:"joinedViaStarterPack,omitempty"`
	// labels: Self-label values, specific to the Bluesky application, on the overall account.
	Labels     *ActorProfile_Labels           `json:"labels,omitempty" cborgen:"labels,omitempty"`
	PinnedPost *comatprototypes.RepoStrongRef `json:"pinnedPost,omitempty" cborgen:"pinnedPost,omitempty"`
}

// Self-label values, specific to the Bluesky application, on the overall account.
type ActorProfile_Labels struct {
	LabelDefs_SelfLabels *comatprototypes.LabelDefs_SelfLabels
}

func (t *ActorProfile_Labels) MarshalJSON() ([]byte, error) {
	if t.LabelDefs_SelfLabels != nil {
		t.LabelDefs_SelfLabels.LexiconTypeID = "com.atproto.label.defs#selfLabels"
		return json.Marshal(t.LabelDefs_SelfLabels)
	}
	return nil, fmt.Errorf("cannot marshal empty enum")
}
func (t *ActorProfile_Labels) UnmarshalJSON(b []byte) error {
	typ, err := lexutil.TypeExtract(b)
	if err != nil {
		return err
	}

	switch typ {
	case "com.atproto.label.defs#selfLabels":
		t.LabelDefs_SelfLabels = new(comatprototypes.LabelDefs_SelfLabels)
		return json.Unmarshal(b, t.LabelDefs_SelfLabels)

	default:
		return nil
	}
}
