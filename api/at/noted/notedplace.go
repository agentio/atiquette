// Code generated by cmd/lexgenlite (see Makefile's lexgen); DO NOT EDIT.

package noted

// schema: at.noted.place

import (
	"github.com/agentio/atiquette/pkg/lexutil"
)

func init() {
	lexutil.RegisterType("at.noted.place", &Place{})
}

// RECORDTYPE: Place
type Place struct {
	LexiconTypeID string                  `json:"$type,const=at.noted.place" cborgen:"$type,const=at.noted.place"`
	CreatedAt     *string                 `json:"createdAt,omitempty" cborgen:"createdAt,omitempty"`
	Geometry      *Place_Geometry         `json:"geometry,omitempty" cborgen:"geometry,omitempty"`
	Location      *Place_Location         `json:"location,omitempty" cborgen:"location,omitempty"`
	Questions     []*Place_Questions_Elem `json:"questions,omitempty" cborgen:"questions,omitempty"`
	Rating        *int64                  `json:"rating,omitempty" cborgen:"rating,omitempty"`
	Review        *string                 `json:"review,omitempty" cborgen:"review,omitempty"`
	Tags          []string                `json:"tags,omitempty" cborgen:"tags,omitempty"`
	Url           *string                 `json:"url,omitempty" cborgen:"url,omitempty"`
}

type Place_Geometry struct {
	Coordinates []int64 `json:"coordinates,omitempty" cborgen:"coordinates,omitempty"`
	Type        *string `json:"type,omitempty" cborgen:"type,omitempty"`
}

type Place_Location struct {
	Address      *string `json:"address,omitempty" cborgen:"address,omitempty"`
	Country_code *string `json:"country_code,omitempty" cborgen:"country_code,omitempty"`
	Name         *string `json:"name,omitempty" cborgen:"name,omitempty"`
}

type Place_Questions_Elem struct {
	Question         *string  `json:"question,omitempty" cborgen:"question,omitempty"`
	Rating           *int64   `json:"rating,omitempty" cborgen:"rating,omitempty"`
	Selected_option  *string  `json:"selected_option,omitempty" cborgen:"selected_option,omitempty"`
	Selected_options []string `json:"selected_options,omitempty" cborgen:"selected_options,omitempty"`
}
